[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "quick_metric"
version = "0.0.1"
description = "A framework for quickly creating metrics using easy to edit YAML configs and reusable methods to Filter, Calculate, and Transform data."
authors = [
  { name = "Joseph Wilson", email = "joseph.wilson8@nhs.net" },
]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License"
]
dependencies = [
    "pandas>=2.0.0",
    "pyyaml>=6.0.0",
    "numpy>=1.24.0",
    "loguru>=0.7.0",
    "oops-its-a-pipeline @ git+https://github.com/nhsengland/oops-its-a-pipeline.git",
    "nhs-herbot @ git+https://github.com/nhsengland/nhs_herbot.git",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.8.0",
]

[tool.ruff]
line-length = 100
src = ["quick_metric"]
include = ["pyproject.toml", "quick_metric/**/*.py"]

[tool.ruff.lint]
extend-select = [
    "I",    # isort (import sorting)
    "F",    # Pyflakes (unused imports, undefined names)
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings  
    "UP",   # pyupgrade (modern Python syntax)
    "B",    # flake8-bugbear (common bugs)
    "SIM",  # flake8-simplify (code simplification)
    "C4",   # flake8-comprehensions (list/dict improvements)
    "PIE",  # flake8-pie (misc linting)
    "RET",  # flake8-return (return statement improvements)
    "PT",   # flake8-pytest-style (pytest best practices)
    "ARG",  # flake8-unused-arguments (unused function arguments)
    "PL",   # Pylint (general code quality)
    "PERF", # Perflint (performance improvements)
]

# Ignore some overly strict rules that don't fit our project
ignore = [
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0915", # Too many statements
    "PLR0912", # Too many branches
    "ARG002",  # Unused method argument (common in interfaces)
]

[tool.ruff.lint.isort]
known-first-party = ["quick_metric"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.coverage.run]
source = ["quick_metric"]
branch = true
omit = [
    "tests/*",
    "*/tests/*", 
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"
