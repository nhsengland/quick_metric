[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "quick_metric"
version = "0.0.1"
description = "A framework for quickly creating metrics using easy to edit YAML configs and reusable methods to Filter, Calculate, and Transform data."
authors = [
  { name = "Joseph Wilson", email = "joseph.wilson8@nhs.net" },
  { name = "NHS England Data Science and Applied AI", email = "england.datascience@nhs.net"}
]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License"
]
dependencies = [
    "pandas>=2.0.0",
    "pyyaml>=6.0.0",
    "numpy>=1.24.0",
    "loguru>=0.7.0",
    "oops-its-a-pipeline @ git+https://github.com/nhsengland/oops-its-a-pipeline.git",
    "nhs-herbot @ git+https://github.com/nhsengland/nhs_herbot.git",
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "pre-commit>=4.3.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.8.0",
]

[tool.ruff]
line-length = 100  # Restored back to 100
src = ["quick_metric"]
include = ["pyproject.toml", "quick_metric/**/*.py", "tests/**/*.py"]

[tool.ruff.lint]
extend-select = [
    "I",
    "F",
    "E",
    "W",
    "UP",
    "B",
    "SIM",
    "C4",
    "PIE",
    "RET",
    "PT",
    "ARG",
    "PL",
    "PERF",
]

# Ignore some overly strict rules that don't fit our project
ignore = [
    "PLR0913",
    "PLR2004",
    "PLR0915",
    "PLR0912",
    "ARG002",
]

[tool.ruff.lint.isort]
known-first-party = ["quick_metric"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.coverage.run]
source = ["quick_metric"]
branch = true
omit = [
    "tests/*",
    "*/tests/*", 
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
# addopts = "-n auto"
testpaths = ["tests"]
log_cli = false
